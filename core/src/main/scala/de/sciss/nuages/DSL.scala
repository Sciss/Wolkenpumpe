/*
 *  DSL.scala
 *  (Wolkenpumpe)
 *
 *  Copyright (c) 2008-2020 Hanns Holger Rutz. All rights reserved.
 *
 *  This software is published under the GNU Affero General Public License v3+
 *
 *
 *  For further information, please contact Hanns Holger Rutz at
 *  contact@sciss.de
 */

package de.sciss.nuages

import de.sciss.lucre.{DoubleObj, DoubleVector, StringObj}
import de.sciss.lucre.{Folder, Obj, Txn => LTxn}
import de.sciss.synth.proc.graph.{Param, ScanIn, ScanInFix, ScanOut}
import de.sciss.synth.proc.Proc
import de.sciss.synth.ugen.ControlValues
import de.sciss.synth.{GE, Rate, SynthGraph, audio, control, proc, scalar}

import scala.concurrent.stm.{InTxn, TxnLocal}

object DSL {
  def apply[T <: LTxn[T]]: DSL[T] = new DSL[T]

  var useScanFixed = false
}
class DSL[T <: LTxn[T]] protected() {
  // val imp = ExprImplicits[T]
  import proc.Implicits._

  private[nuages] val current = TxnLocal[Proc[T]]()

  protected def currentProc(implicit tx: InTxn): Proc[T] = current()

  /** Creates a `Proc.Obj` with a synth-graph whose function
    * is determined by the `fun` argument.
    *
    * @param name name to assign to the resulting object
    * @param fun  the function that creates the synth-graph
    * @return     an object whose `Proc` has a synth-graph with the
    *             content generated by `fun` and the supplied `name`
    */
  def mkProcObj(name: String)(fun: => Unit)(implicit tx: T /* , n: Nuages[T] */): Proc[T] = {
    val p   = Proc[T]()
    p.name  = name
    current.set(p)(tx.peer)
    p.graph() = SynthGraph { fun }
    current.set(null)(tx.peer)
    p
  }

  def pAudio(key: String, spec: ParamSpec, default: ControlValues)(implicit tx: T): GE =
    mkPar(audio, key = key, spec = spec, default = default)

  def pControl(key: String, spec: ParamSpec, default: ControlValues)(implicit tx: T): GE =
    mkPar(control, key = key, spec = spec, default = default)

  def pScalar(key: String, spec: ParamSpec, default: ControlValues)(implicit tx: T): GE =
    mkPar(scalar, key = key, spec = spec, default = default)

  def pAudioIn(key: String, numChannels: Int = -1)(implicit tx: T): GE = {
    require (key.startsWith("in_"), "pAudioIn keys must begin with 'in_'")
    val sig       = if (numChannels == -1) ScanIn() else ScanInFix(numChannels)
    val obj       = current.get(tx.peer)
//    obj.inputs.add(key)
    val objAttr   = obj.attr
    //    paramObj.attr.put(ParamSpec.Key, specObj)
    val paramObj: Obj[T] = if (numChannels < 0) {
      DoubleObj   .newVar(DoubleObj   .newConst[T](0.0))
    } else {
      DoubleVector.newVar(DoubleVector.newConst[T](Vector.fill(numChannels)(0.0)))
    }
    objAttr.put(key, paramObj)
    sig
  }

  def shortcut(implicit tx: T): String = {
    val obj = current.get(tx.peer)
    obj.attr.$[StringObj](Nuages.attrShortcut).map(_.value).getOrElse("")
  }
  def shortcut_=(value: String)(implicit tx: T): Unit = {
    val obj       = current.get(tx.peer)
    if (value.isEmpty) {
      obj.attr.remove(Nuages.attrShortcut)
    } else {
      val paramObj = StringObj.newConst[T](value)
      obj.attr.put(Nuages.attrShortcut, paramObj)
    }
  }

  private def mkPar(rate: Rate, key: String, spec: ParamSpec, default: ControlValues)(implicit tx: T): GE = {
    val obj         = current.get(tx.peer)
    val defaultFwd  = default.seq
    val defaultInv  = defaultFwd.map(spec.inverseMap(_))
    val paramObj: Obj[T] = defaultInv match {
      case Seq(defaultN) => DoubleObj   .newVar(DoubleObj   .newConst[T](defaultN))
      case     defaultN  => DoubleVector.newVar(DoubleVector.newConst[T](defaultN))
    }
    val specObj = ParamSpec.Obj.newConst[T](spec)
    val specKey = ParamSpec.composeKey(key)
    val objAttr = obj.attr
//    paramObj.attr.put(ParamSpec.Key, specObj)
    objAttr.put(specKey , specObj )
    objAttr.put(key     , paramObj)
    // obj.attr.put(s"$key-${ParamSpec.Key}", specObj)
    val fixed = if (default.seq.size > 1) default.seq.size else -1    // XXX TODO -- is this always good?

//    val sig = Attribute(rate, key, Some(default.seq), fixed = fixed)
//    val clip = sig.max(0).min(1)   // some crazy bugs in Clip
//    spec.map(clip)

//    val defaultInvF = defaultInv.map(_.toFloat)
    Param(rate, key = key, default = Some(default.seq), fixed = fixed)
  }

  /** Inserts an element into a folder at the index
    * corresponding with an alphabetical ordering by name.
    * The index can only be correctly determined if
    * alphabetical sorting (by lower-case names) is obeyed.
    * If an existing element with the same name as the
    * element to insert is found, that existing element will
    * be replaced.
    *
    * @param folder the folder to insert the element info
    * @param elem   the element to add
    */
  def insertByName(folder: Folder[T], elem: Obj[T])(implicit tx: T): Unit = {
    val name  = elem.name
    val nameL = name.toLowerCase
    val idx0  = folder.iterator.toList.indexWhere(_.name.toLowerCase.compareTo(nameL) >= 0)
    // replace existing items
    if (idx0 >= 0 && folder.get(idx0).exists(_.name == name)) {
      folder.removeAt(idx0)
    }
    val idx   = if (idx0 >= 0) idx0 else folder.size
    folder.insert(idx, elem)
  }

//  def generator(name: String)(body: GE)(implicit tx: T, n: Nuages[T]): Proc[T] =
//    macro DSLMacros.generator[T]

  def generator(name: String)(fun: => GE)(implicit tx: T, n: Nuages[T]): Proc[T] = {
    val obj = mkProcObj(name) {
      val out = fun
      ScanOut(Proc.mainOut, out)
    }
    obj.outputs.add(Proc.mainOut)
    val genOpt = n.generators
    insertByName(genOpt.get, obj)
    obj
  }

  def filter(name: String, numChannels: Int = -1)(fun: GE => GE)(implicit tx: T, n: Nuages[T]): Proc[T] = {
    val obj = mkProcObj(name) {
      val in  = if (numChannels == -1) ScanIn() else ScanInFix(numChannels)
      val out = fun(in)
      ScanOut(Proc.mainOut, out)
    }
    val proc  = obj
    proc.outputs.add(Proc.mainOut)
    insertByName(n.filters.get, obj)
    obj
  }

  def pAudioOut(key: String, sig: GE)(implicit tx: T): Unit = {
    val obj = current.get(tx.peer)
    ScanOut(key, sig)
    obj.outputs.add(key)
  }

  def sink(name: String, numChannels: Int = -1)(fun: GE => Unit)(implicit tx: T, n: Nuages[T]): Proc[T] =
    sinkLike(n.filters.get, name = name, numChannels = numChannels, fun = fun)

  def collector(name: String, numChannels: Int = -1)(fun: GE => Unit)(implicit tx: T, n: Nuages[T]): Proc[T] =
    sinkLike(n.collectors.get, name = name, numChannels = numChannels, fun = fun)

  private def sinkLike(folder: Folder[T], name: String, numChannels: Int, fun: GE => Unit)
                            (implicit tx: T): Proc[T] = {
    val obj = mkProcObj(name) {
      val in = if (numChannels == -1) ScanIn() else ScanInFix(numChannels)
      fun(in)
    }
    insertByName(folder, obj)
    obj
  }

  // def prepare(obj: Obj[T])(fun: T => Obj[T] => Unit): Unit = ...
}